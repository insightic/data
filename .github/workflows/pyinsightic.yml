---
name: Run PyInsightic

"on":
  workflow_dispatch:

jobs:
  yaml-format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install yamllint
        run: pip install yamllint

      - name: Run yamllint
        run: yamllint .

  run_analysis:
    needs: yaml-format-check
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          # Fetches all history for all tags and branches
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install Chromium and ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser
          sudo apt-get install -y chromium-chromedriver

      - name: Check Chromium installation
        run: |
          which chromium-browser
          dpkg -L chromium-browser

      - name: Install Poppler
        run: sudo apt-get install -y poppler-utils

      # Install Tesseract OCR
      - name: Install Tesseract OCR
        run: |
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr
          sudo apt-get install -y libtesseract-dev

      - name: Install from private repository
        run: |
          pip install git+https://$GITHUB_TOKEN:x-oauth-basic@github.com/insightic/pyinsightic.git#egg=pyinsightic
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_SECRET }}

      - name: Run pyinsightic analysis
        run: |
          cd stablecoin && python main.py
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          DUNE_API_KEY: ${{ secrets.DUNE_API_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}

      - name: Commit and Push results
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"

          # Stash changes before checking out
          git stash push -m "Stashing changes before switching branches"

          # Checkout the gh-pages branch
          git fetch origin gh-pages
          git checkout gh-pages || git checkout -b gh-pages
          git pull origin gh-pages --rebase

          # Apply stashed changes (if any) to gh-pages branch
          git stash pop || true

          shopt -s globstar
          FILES_TO_COMMIT=""
          for FILE_PATTERN in **/sosovalue.json **/linkedin.json **/twitter.json **/smartcontractvalidator.json **/stablecoin.json **/securityassessment.json; do
            if compgen -G "$FILE_PATTERN" > /dev/null; then
              FILES_TO_COMMIT="$FILES_TO_COMMIT $(echo $FILE_PATTERN)"
            else
              echo "No files matching $FILE_PATTERN to commit."
            fi
          done

          if [ -n "$FILES_TO_COMMIT" ]; then
            echo "Adding files to commit: $FILES_TO_COMMIT"
            git add $FILES_TO_COMMIT

            # Commit and push to the gh-pages branch
            git commit -m "Update analysis results"
            git push origin gh-pages
          else
            echo "No changes to commit."
          fi
        shell: bash
